final Properties localProperties = new Properties()
final def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
  localPropertiesFile.withReader('UTF-8') { final reader ->
    localProperties.load(reader)
  }
}

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
final def enableProguardInReleaseBuilds = true

final def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
  throw new Exception('Flutter SDK not found. Define location with flutter.sdk in the local.properties file.')
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
  flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
  flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
dependencies {
  implementation 'com.google.android.gms:play-services-auth:20.4.0'
}

apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

final def keystoreProperties = new Properties()
final def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
  lintOptions {
    disable 'InvalidPackage'
    checkReleaseBuilds false
  }

  signingConfigs {
    debug {
      if (project.hasProperty('ESS_UPLOAD_STORE_FILE')) {
        storeFile file(ESS_UPLOAD_STORE_FILE)
        storePassword ESS_UPLOAD_STORE_PASSWORD
        keyAlias ESS_DEBUG_KEY_ALIAS
        keyPassword ESS_UPLOAD_KEY_PASSWORD
      }
    }
    release {
      keyAlias keystoreProperties['keyAlias']
      keyPassword keystoreProperties['keyPassword']
      storeFile file(keystoreProperties['storeFile'])
      storePassword keystoreProperties['storePassword']
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      signingConfig signingConfigs.release
      profile {
        matchingFallbacks = ['debug', 'release']
      }
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  flavorDimensions 'flavor-type'

productFlavors {

    development {
      dimension 'flavor-type'
      applicationId 'dev.helpis.ess'
      resValue 'string', 'app_name', 'ess'
      applicationIdSuffix 'development'
      minSdkVersion flutter.minSdkVersion
      targetSdkVersion flutter.targetSdkVersion
      multiDexEnabled true
    }

    production {
      dimension 'flavor-type'
      applicationId 'dev.helpis.ess'
      resValue 'string', 'app_name', 'ess'
      applicationIdSuffix 'production'
      minSdkVersion flutter.minSdkVersion
      targetSdkVersion flutter.targetSdkVersion
      multiDexEnabled true
    }

    staging {
      dimension 'flavor-type'
      applicationId 'dev.helpis.ess'
      resValue 'string', 'app_name', 'ess'
      applicationIdSuffix 'staging'
      minSdkVersion flutter.minSdkVersion
      targetSdkVersion flutter.targetSdkVersion
      multiDexEnabled true
    }

}

  compileSdkVersion flutter.compileSdkVersion
  ndkVersion '25.1.8937393'

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    jvmTarget = '1.8'
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }

  defaultConfig {
    applicationId 'dev.helpis.ess'
    minSdkVersion flutter.minSdkVersion
    targetSdkVersion flutter.targetSdkVersion
    versionCode flutterVersionCode.toInteger()
    versionName flutterVersionName
    multiDexEnabled true
  }

  buildToolsVersion '33.0.0'
}

flutter {
  source '../..'
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation 'com.android.support:multidex:1.0.3'
}


